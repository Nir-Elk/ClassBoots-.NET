@model ClassBoots.Models.Video

@{
    ViewData["Title"] = "Details";
    Layout = "~/Views/Shared/_Empty.cshtml";
}

<h2>@Html.DisplayFor(model => model.Name)</h2>

<div>
    <h4>Lecturer - @Html.DisplayFor(model => model.LectureID)</h4>
    <hr />
    <div id="player"></div>
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.URL)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.URL)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Views)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Views)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Position)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Position)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.OwnerID)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.OwnerID)
        </dd>
    </dl>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model.ID">Edit</a> |
    <a asp-action="Index">Back to List</a>
</div>


<script>
      // 2. This code loads the IFrame Player API code asynchronously.
      var tag = document.createElement('script');

      tag.src = "https://www.youtube.com/iframe_api";
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      // 3. This function creates an <iframe> (and YouTube player)
      //    after the API code downloads.
      var player;
      function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
          height: '390',
          width: '640',
          videoId: 'M7lc1UVf-VE',
          events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
          }
        });
      }

      // 4. The API will call this function when the video player is ready.
      function onPlayerReady(event) {
        event.target.playVideo();
      }

      // 5. The API calls this function when the player's state changes.
      //    The function indicates that when playing a video (state=1),
      //    the player should play for six seconds and then stop.
      var done = false;
      function onPlayerStateChange(event) {
        if (event.data == YT.PlayerState.PLAYING && !done) {
          setTimeout(stopVideo, 6000);
          done = true;
        }
      }
      function stopVideo() {
        player.stopVideo();
      }
</script>
